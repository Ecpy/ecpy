# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Collection of widgets used to create and edit rules.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from operator import attrgetter

from enaml.layout.api import hbox, spacer, vbox
from enaml.widgets.api import (PushButton, Container, Dialog, CheckBox,
                               ObjectCombo, Notebook, Page)
from enaml.stdlib.message_box import warning

from ....utils.widgets.qt_list_str_widget import QtListStrWidget


enamldef CreateRuleDialog(Dialog): dial:
    """Dialog used to create a new rule.

    """
    #: Newly created rule.
    attr rule

    #: Reference to the text monitor plugin.
    attr plugin

    title = 'Select/Create a rule'

    Notebook:
        Page: p_select:
            attr rule
            title = 'Existing rules'
            selected ::
                dial.rule = self.rule

            Container:
                constraints = [hbox(qlist, *v.objects)]

                QtListStrWidget: qlist:
                    items = plugin.rules
                    selected_item::
                        p_select.rule = plugin.build_rule(selected_item)
                        dial.rule = p_select.rule

                Include: v_select:
                    enabled = False
                    objects << ([plugin.get_rule_view(p_select.rule)]
                                if p_select.rule else [])

        Page: p_build:
            title = 'Build rule'
            attr rule

            selected ::
                dial.rule = self.rule

            Container:
                constraints << [vbox(
                                com, vbox(*v.objects),
                                hbox(spacer, ok, cancel))
                                ]

                ObjectCombo: com:
                    items << plugin.rule_types
                    selected = None
                    selected ::
                        p_build.rule = plugin.get_rule_type(selected)()
                        dial_rule = p_build.rule

                Include: v_build:
                    objects << ([plugin.get_rule_view(p_build.rule)]
                                if p_build.rule else []):

                CheckBox: sav:
                    text = 'Save in preferences'

        PushButton: ok:
            text = 'Ok'
            enabled << dial.rule
            clicked ::
                if dial.rule is p_select.rule:
                    v = v_select.objects[0]
                else:
                    v = v_build.objects[0]
                res, msg = v.validate()
                if not res:
                    warning(self, 'Wrong parameters', msg)
                else:
                    if sav.checked:
                        plugin.save_rule(rule)
                    dial.accept()

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()


enamldef EditRulesView(Dialog): dial:
    """Dialog to edit all the rules attached to a monitor.

    """
    #: Reference to the monitor whose rules are being edited.
    attr monitor

    title = 'Rules'

    Container:
        constraints << [vbox(
                            hbox(qlist, vbox(*v.objects),
                                vbox(add, edit, delete, save, spacer)),
                            hbox(spacer, ex))]
        QtListStrWidget: qlist:
            items << monitor.rules
            to_string = attrgetter('id')

        Include: v:
            objects << ([plugin.get_rule_view(qlist.selected)]
                        if qlist.selected else [])

        PushButton: add:
            text = 'Add'
            clicked ::
                dial = CreateRuleDialog(plugin=monitor.plugin)
                if dial.exec_():
                    monitor.rules.append(dial.rule)
                    qlist.refresh_items()

        PushButton: delete:
            text = 'Delete'
            clicked ::
                del monitor.rules[qlist.selected_index]
                qlist.refresh_items()

        PushButton: save:
            text = 'Save'
            tool_tip = 'Save the rule definition into the preferences'
            enabled << (bool(qlist.selected) and
                        bool(qlist.selected.id not in
                             monitor.plugin._rule_configs))
            Menu:
                Action:
                    text = 'Save'
                    triggered ::
                        plugin.save_rule(qlist.selected)
                Action:
                    text = 'Save and add to default'
                    triggered ::
                        plugin.save_rule(qlist.selected)
                        plugin.default_rules.append(qlist.selected.id)

        PushButton: ex:
            text = 'Close'
            clicked ::
                dial.accept()
