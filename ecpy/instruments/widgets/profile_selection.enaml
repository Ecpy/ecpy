# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets used to select a profile and the driver/connection/settings to use.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from configobj import ConfigObj
from atom.api import Coerced
from enaml.layout.api import hbox, vbox
from enaml.widgets.api import (Container, Dialog, Form, Label, ObjectCombo,
                               PushButton)

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names


enamldef ProfileSelectionWidget(Container):
    """A widget to select a profile and what connection and settings to use.

    """
    #: Reference to the instrument plugin.
    attr plugin

    #: Currently selected profile (id)
    alias profile : pl.selected_item

    #: Infos of the currently selected profile.
    attr infos << plugin._profiles[profile]

    #: Currently selected driver (id)
    attr driver = infos.model.drivers[0].id

    #: Currently selected connection (id)
    attr connection

    #: Currently selected settings
    attr settings

    func matching_connections(p_infos, d_id):
        """Determine the allowed connections based on the selected driver.

        """
        if not p_infos or not d_id:
            return []

        driver_connections = infos.model.drivers[driver].connections
        return [c for c in infos.connections if c in driver_connections]

    func matching_settings(p_infos, d_id):
        """Determine the allowed settings based on the selected driver.

        """
        if not p_infos or not d_id:
            return []

        driver_settings = infos.model.drivers[driver].settings
        return [s for s in infos.settings
                if infos.get_settings[s]['id'] in driver_settings]

    constraints = [hbox(pl, pf)]

    QtListStrWidget: pl:
        items = plugin._profiles
        selected_item ::
            driver = infos.model.drivers[0].id

    Form: pf:

        Label:
            text = 'Manufacturer'
        Field:
            text << '%s (%s)' % (infos.model.manufacturer,
                                 plugin.get_aliases(infos.model.manufacturer))
            read_only = True

        Label:
            text = 'Model'
        Field:
            text << infos.model.model

        Conditional:
            condition = len(infos.model.drivers) > 1
            Label:
                text = 'Driver'
            ObjectCombo: dc:
                # TODO handle same architecture for different drivers
                attr drivers << {d.id: d.infos['architecture']
                                 for d in infos.model.drivers}
                items << list(drivers)
                items ::
                    self.selected = None
                to_string = lambda i: drivers[i]
                selected := driver

        Label:
            text = 'Connections'
        ObjectCombo: cc:
            enabled << bool(driver)
            items << matching_connections(infos, driver)
            items ::
                if self.selected not in change['value']:
                    self.selected = None
            selected := connection

        Conditional:
            condition = bool(infos.settings)
            Label:
                text << 'Settings'
            ObjectCombo: sc:
                enabled << bool(driver)
                items << matching_settings(infos, driver)
                items ::
                    if self.selected not in change['value']:
                        self.selected = None
                selected := settings



enamldef ProfileSelectionDialog(Dialog): dial:
    """A dialog to select a profile and what connection and settings to use.

    """
    #: Reference to the instrument plugin
    alias plugin : w.plugin

    #: Currently selected profile (id)
    alias profile : w.profile

    #: Currently selected driver (id)
    alias driver : w.driver

    #: Currently selected connection (id)
    alias connection : w.connection

    #: Currently selected settings (id)
    alias settings : w.settings

    Container:

        constraints = []

        ProfileSelectionWidget: w:
            pass

        PushButton:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton:
            text = 'Ok'
            enabled << (w.driver and w.connection)
            clicked ::
                dial.accept()
