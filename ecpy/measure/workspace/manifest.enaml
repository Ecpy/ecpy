# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Definition of the workspace content and contributed menus.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.widgets.api import (Container, DockArea, DockItem, Menu, Action,
                               PopupView, Label)
from enaml.layout.api import HSplitLayout, VSplitLayout
from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem
from enaml.styling import StyleSheet, Style, Setter


# =============================================================================
# --- Utilities ---------------------------------------------------------------
# =============================================================================

enamldef MoreVisibleLabel(StyleSheet):
    """Style sheet allowing to use a large font for the save confirmation popup

    """
    Style:
        style_class = 'large-font'
        Setter:
            field = 'font'
            value = '20pt bold Verdana'


enamldef SaveConfirm(PopupView):
    """Popup signaling that a measure was correctly saved.

    """
    #: Name of the measure that was just saved.
    attr measure_name

    parent_anchor = (0.5, 0.0)
    timeout = 2

    MoreVisibleLabel:
        pass
    Container:
        Label:
            text = 'Measure {} was correctly saved'.format(measure_name)
            style_class = 'large-font'


# =============================================================================
# --- Command handlers --------------------------------------------------------
# =============================================================================

def new_measure(event):
    """Create a new blank measure.

    """
    workbench = event.workbench
    plugin = workbench.get_plugin('ecpy.measure')
    plugin.workspace.new_measure()


def save_measure(event):
    """Save a measure.

    If no measure is passed in the parameters the last selected measure is
    automatically saved.

    """
    workbench = event.workbench
    workspace = workbench.get_plugin('ecpy.measure').workspace
    measure = event.parameters['measure']

    if measure and measure.path:
        measure.save(measure.path)
        window = workbench.get_plugin('enaml.workbench.ui').window
        SaveConfirm(window, measure_name=measure.name).show()

    else:
        plugin.workspace.save_measure(measure)


def save_measure_as(event):
    """Save a measure to a location specified by the user.

    """
    workbench = event.workbench
    plugin = workbench.get_plugin('ecpy.measure')
    plugin.workspace.save_measure(event.parameters['measure'], False)


def load_measure(event):
    """Load a measure stored in a config file.

    """
    workbench = event.workbench
    plugin = workbench.get_plugin('ecpy.measure')
    plugin.workspace.load_measure('file')


def load_template(event):
    """Create a new measure using a task template as root.

    """
    workbench = event.workbench
    plugin = workbench.get_plugin('hqc_meas.measure')
    plugin.workspace.load_measure('template')


# =============================================================================
# --- Descriptions ------------------------------------------------------------
# =============================================================================

NEW_DESCRIPTION =\
'''Create a new measure using the default parameters for the tools (monitors,
pre-execution and post-execution hooks).'''

SAVE_DESCRIPTION =\
'''Save a currently edited measure to a file. If this measure has already
been saved to a file then simply overwrite it.'''

SAVE_AS_DESCRIPTION =\
'''Save a currently edited measure to a file. The user will always be asked
to choose a file to which the measure should be saved.'''

LOAD_DESCRIPTION =\
'''Load a measure from a file.'''

LOAD_DESCRIPTION =\
'''Create a measure from a template.'''

# =============================================================================
# --- Manifest ----------------------------------------------------------------
# =============================================================================

enamldef MeasureSpaceMenu(PluginManifest):
    """ Contribution to the main window of the MeasureSpace.

    """
    #: Reference to the workspace
    attr workspace

    id = 'ecpy.measure.workspace.menus'

    # =========================================================================
    # --- Extensions ----------------------------------------------------------
    # =========================================================================

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'ecpy.measure.workspace.new'
            description = NEW_DESCRIPTION
            handler = new_measure
        Command:
            id = 'ecpy.measure.workspace.save'
            description = SAVE_DESCRIPTION
            handler = save_measure
        Command:
            id = 'ecpy.measure.workspace.save_as'
            description = SAVE_AS_DESCRIPTION
            handler = save_measure_as
        Command:
            id = 'ecpy.measure.workspace.load'
            description = LOAD_DESCRIPTION
            handler = load_measure
        Command:
            id = 'ecpy.measure.workspace.load_template'
            description = LOAD_TEMPLATE_DESCRIPTION
            handler = load_template

    Extension:
        id = 'action'
        point = 'enaml.workbench.ui.actions'
        # File contributions.
        ActionItem:
            path = '/file/new'
            label = 'New measure'
            command = 'ecpy.measure.workspace.new'
            group = 'user'
            before = 'save'
        ActionItem:
            path = '/file/save'
            label = 'Save measure'
            shortcut = 'Ctrl+S'
            command = 'ecpy.measure.workspace.save'
            parameters = dict(measure=workspace.last_selected_measure)
            group = 'user'
            before = 'save_as'
        ActionItem:
            path = '/file/save_as'
            label = 'Save measure as'
            command = 'ecpy.measure.workspace.save_as'
            parameters = dict(measure=workspace.last_selected_measure)
            group = 'user'
            before = 'load'
        ActionItem:
            path = '/file/load'
            label = 'Load measure'
            command = 'ecpy.measure.workspace.load'
            group = 'user'
            before = 'load_template'
        ActionItem:
            path = '/file/load_template'
            label = 'Build measure from template'
            command = 'ecpy.measure.workspace.load_template'
            group = 'user'
            # TODO reactivate later
            enabled = False
