# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Measure plugin manifest.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.stdlib.message_box import warning
from enaml.workbench.api import PluginManifest, ExtensionPoint, Extension
from enaml.workbench.ui.api import ActionItem

from ..app.api import AppClosing, Preferences


# =============================================================================
# --- Factories ---------------------------------------------------------------
# =============================================================================

def measure_plugin_factory():
    """Factory function for the plugin.

    Delayed import allow faster start-up.

    """
    from .plugin import MeasurePlugin
    return MeasurePlugin()

def workspace_factory(workbench):
    """Factory function for the workspace.

    Delayed import allow faster start-up.

    """
    from .workspace import MeasureSpace
    return MeasureSpace()

# =============================================================================
# --- Closing handler ---------------------------------------------------------
# =============================================================================

def validate_closing(window, event):
    """Check that no measure is currently running before app closing.

    """
    workbench = window.workbench
    plugin = workbench.get_plugin('hqc_meas.measure', force_create=False)
    if plugin and plugin.flags:
        event.ignore()
        msg = 'A measure is currently running please stop it before exiting.'
        warning(window, 'Measure running', msg)

# =============================================================================
# --- Descriptions ------------------------------------------------------------
# =============================================================================

ENGINE_DESCRIPTION =\
"""Users can contribute Engine to this point to add a new way to execute a
bunch of tasks.

"""


EDITOR_DESCRIPTION =\
"""Users can contribute Editor to this point to add new editing capabilities
for tasks. Editors use can be restricted to a small subset of tasks.

"""


PRE_EXECUTION_DESCRIPTION =\
"""Users can contribute PreExecutionHook to this point to add new ways of
customizing the process of execution of a measure. Such hook are executed
before running the measure. They can inject new values in the database of the
measure, run advance tests, ...

"""


MONITORS_DESCRIPTION =\
"""Users can contribute Monitor to this point to add new ways of
monitoring the execution of a measure.

"""


POST_EXECUTION_DESCRIPTION =\
"""Users can contribute PostExecutionHook to this point to add new ways of
customizing the process of execution of a measure. Such hook are executed
after running the measure. They can clean after the measure no matter how it
ended, ...

"""


# =============================================================================
# --- Manifest ----------------------------------------------------------------
# =============================================================================
# XXXX descriptions
# TODO need at least two error handler : measure-errors
enamldef MeasureManifest(PluginManifest):
    # XXXX
    """
    """
    id = 'ecpy.measure'
    factory = measure_plugin_factory

    # =========================================================================
    # --- Extension points ----------------------------------------------------
    # =========================================================================

    ExtensionPoint:
        id = 'engines'
        description = ENGINE_DESCRIPTION

    ExtensionPoint:
        id = 'editors'
        description = EDITOR_DESCRIPTION

    ExtensionPoint:
        id = 'pre-execution'
        description = PRE_EXECUTION_DESCRIPTION

    ExtensionPoint:
        id = 'monitors'
        description = MONITORS_DESCRIPTION

    ExtensionPoint:
        id = 'post-execution'
        description = POST_EXECUTION_DESCRIPTION

    # =========================================================================
    # --- Extensions ----------------------------------------------------------
    # =========================================================================

    Extension:
        id = 'prefs'
        point = u'ecpy.preferences.plugin'
        Preferences:
            pass

#    Extension:
#        id = 'instr_user'
#        point = 'excpy.instr_manager.users'
#        InstrUser:
#            default_policy = 'unreleasable'

    Extension:
        id = 'app_closing'
        point = 'ecpy.app.closing'
        AppClosing:
            id = 'ecpy.measure.running'
            validate => (window, event):
                return validate_closing(window, event)

    Extension:
        id = 'workspace'
        point = 'enaml.workbench.ui.workspaces'
        factory = workspace_factory

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/workspace/measure'
            label = 'Measure'
            shortcut = 'Ctrl+1'
            group = 'spaces'
            command = 'enaml.workbench.ui.select_workspace'
            parameters = {'workspace': 'ecpy.measure.workspace'}

    Extension:
        id = 'err_handlers'
        point = 'ecpy.app.errors.handler'
        ErrorHandler:
            id = 'measure-error'
            description = MEASURE_ERROR_DESCRIPTION
            handle => (workbench, infos):
                if not isinstance(infos, Mapping):
                    pass  # This should never occur ...
                else:


                logger.debug(msg)
                return MultilineField(read_only=True, text=msg)
