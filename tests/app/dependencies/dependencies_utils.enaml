# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""False dependencies declaration used for testing.

"""
from enaml.workbench.api import PluginManifest, Extension

from exopy.app.dependencies.dependencies import (BuildDependency,
                                                RuntimeDependencyCollector,
                                                RuntimeDependencyAnalyser)


BUILD_DEP_POINT = 'exopy.app.dependencies.build'

RUNTIME_DEP_COLLECT_POINT = 'exopy.app.dependencies.runtime_collect'

RUNTIME_DEP_ANALYSE_POINT = 'exopy.app.dependencies.runtime_analyse'


enamldef BuildDep(PluginManifest):
    """Build dependency contributor.

    """
    id = 'test.build_dep'

    Extension:
        id = 'build_deps'
        point = BUILD_DEP_POINT

        BuildDependency:
            id = 'test'
            attr err : bool = False
            attr run = ('test_run',)
            attr exc : bool = False

            analyse => (workbench, obj, getter, dependencies, errors):
                if exc:
                    raise RuntimeError()

                if err:
                    errors[str(obj)] = 'Failed to get val'

                dependencies.add(getter(obj, 'val'))
                return run

            validate => (workbench, dependencies, errors):
                if exc:
                    raise RuntimeError()

                for x in dependencies:
                    if x != 'r':
                        errors[x] = 'Unknown val dependency value.'

            collect => (workbench, dependencies, errors):
                if exc:
                    raise RuntimeError()

                for x in dependencies:
                    if x != 'r':
                        errors[x] = 'Unknown val dependency value.'
                    else:
                        dependencies['r'] = object

enamldef RuntimeDep(PluginManifest):
    """Runtime dependency contributor.

    """
    id = 'test.runtime_dep'

    Extension:
        id = 'runtime_deps_collect'
        point = RUNTIME_DEP_COLLECT_POINT

        RuntimeDependencyCollector:
            id = 'test_run_collect'
            attr exc : bool = False
            attr err : bool = False
            attr una : bool = False

            validate => (workbench, dependencies, errros):
                for x in dependencies:
                    if x != 2:
                        errors[self.id] = 'Unknown run dependency value.'

            collect => (workbench, owner, dependencies, unavailable, errors):
                if exc:
                    raise RuntimeError()
                if err:
                    errors['run'] = 'Failed to get run'
                    return
                if una:
                    unavailable.add('run')
                    return
                dependencies['run'] = 1

            release => (workbench, owner, dependencies):
                del dependencies['run']

    Extension:
        id = 'runtime_deps_analyse'
        point = RUNTIME_DEP_ANALYSE_POINT

        RuntimeDependencyAnalyser:

            id = 'test_run'
            collector_id = 'test_run_collect'
            attr exc : bool = False
            attr err : bool = False

            analyse =>  (workbench, obj, dependencies, errors):
                if exc:
                    raise RuntimeError()
                if err:
                    errors[str(obj)] = 'Failed to get run'
                    return
                dependencies.add(obj.run)

        RuntimeDependencyAnalyser:

            id = 'test_run2'
            collector_id = 'test_run2'
            attr exc : bool = False
            attr err : bool = False

            analyse =>  (workbench, obj, dependencies, errors):
                pass