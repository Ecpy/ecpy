# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Run this file with enaml-run command to manually check widget behavior.

In this test, a dictionary is displayed as read-only using an
ErrorDisplayContainer. On the left a QtListStrWidget allows to select the key
for which the value should be displayed in the MultiLineField on the right.
The MulitilineField below simply display the underlying dictionary to check
that everything makes sense. The push buttons can be used to open a dialog
displaying errors, an empty ones and to changes the dict of errors.
When testing one should pay particular attention to how the selection
reacts : clicking on an entry should immediately display the corresponding
value.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import sys
import os
from enaml.widgets.api import (Window, Container, PushButton, MultilineField)
from enaml.layout.api import vbox, hbox

# Assume that the test is run against an installed version of ecpy and if not
# prepend path to sys.path.
try:
    from ecpy.utils.widgets.errors_display import (ErrorsDisplayContainer,
                                                   ErrorsDisplay)
except ImportError:
    sys.path.insert(0, os.path.abspath(os.path.join(*(['..']*3))))
    from ecpy.utils.widgets.errors_display import (ErrorsDisplayContainer,
                                                   ErrorsDisplay)


enamldef Main(Window): main:

    title = 'Test ErrorsDisplay'
    tool_tip = '\n'.join(__doc__.split('\n')[2:]).strip()

    attr errors = {'Loading': 'Could not load Dummy',
                   'Preferences': 'Unable to locate preference folder'}
    Container:
        constraints = [vbox(ed, ml, hbox(di, edi), ch),
                       di.width == edi.width]

        ErrorsDisplayContainer: ed:
            errors << main.errors
            errors_type = 'Start up errors'

        MultilineField: ml:
            text << str(errors)
            read_only = True

        PushButton: di:
            text = 'Dialog'
            clicked::
                ErrorsDisplay(self, errors=errors,
                              errors_type='Start up errors').exec_()

        PushButton: edi:
            text = 'Empty dialog'
            clicked::
                ErrorsDisplay(self, no_err_message='No errors',
                              errors_type='No errors').exec_()

        PushButton: ch:
            text = 'Swap errors'
            attr old
            attr new = {'Single': 'Single error'}
            clicked::
                self.old = main.errors
                main.errors = self.new
                self.new = self.old
