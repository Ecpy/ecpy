# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Run this file with enaml-run command to manually check widget behavior.

The window is divided in two :
- the first contains a QtLineCompleter widget, a field reflecting the state of
  the model and a clear button. When typing in the QtLineCompleter you should
  be proposed completion after an opening {. If removing it the popup should
  disappear. If you select a completion and no unmatched } is found one is
  au tomatically inserted.
- the second contains a QtTextCompleter, a multiline field reflecting the state
  of the model and a clear button. When typing in the QtTextCompleter you
  should be proposed completion after a space. The popup should appear by the
  cursor and you should be able to select an entry using 'Enter'. If the widget
  loses focus on the next time you are proposed a completion a different set
  of possible values should appear.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import sys
import os
from atom.api import Atom, Unicode, Bool
from enaml.widgets.api import (Window, Container, PushButton, Field,
                               MultilineField, GroupBox)
from enaml.layout.api import vbox, hbox, spacer

# Assume that the test is run against an installed version of ecpy and if not
# prepend path to sys.path.
try:
    from ecpy.utils.widgets.qt_completers import (QtLineCompleter,
                                                  QtTextCompleter)
except ImportError:
    sys.path.insert(0, os.path.abspath('....'))
    from ecpy.utils.widgets.qt_completers import (QtLineCompleter,
                                                  QtTextCompleter)


class Model(Atom):
    """Dummy class holding the string displayed by the QtAutoscrollHtml widget.

    """
    #: Text displayed by the completer.
    text = Unicode()

    #: Flag used to change the proposed list of entries.
    _flag = Bool()

    def propose_entries(self):
        """Propose a list of entries on which to use when completing.

        """
        self._flag = not self._flag
        if self._flag:
            return ['Paris', 'Madrid', 'Berlin', 'London']
        else:
            return ['France', 'Spain', 'Germany', 'England']


enamldef Main(Window):

    title = 'Test completers'
    tool_tip = '\n'.join(__doc__.split('\n')[2:]).strip()

    attr line_model = Model()
    attr text_model = Model()

    Container:

        GroupBox:
            title = 'Line completer'
            constraints = [vbox(lc, hbox(l_f, l_cl))]

            QtLineCompleter: lc:
                text := line_model.text
                entries = ['loop_index', 'loop_value']

            Field: l_f:
                text << line_model.text
                read_only = True
                hug_width = 'ignore'

            PushButton: l_cl:
                text = 'Clear'
                clicked :: line_model.text = ''

        GroupBox:
            title = 'Multiline completer'
            constraints = [vbox(tc, hbox(t_f, t_cl))]

            QtTextCompleter: tc:
                text := text_model.text
                entries_updater = text_model.propose_entries
                delimiters = (' ', ' ')

            MultilineField: t_f:
                text << text_model.text
                read_only = True

            PushButton: t_cl:
                text = 'Clear'
                clicked :: text_model.text = ''
