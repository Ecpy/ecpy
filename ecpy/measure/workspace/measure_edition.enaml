# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widget related to measure edition tasks.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import logging
from operators import attrgetter

from atom.api import Atom, ForwardTyped, Typed, Bool, Dict, List
from enaml.core.api import Include
from enaml.layout.api import hbox, vbox, align, InsertTab
from enaml.widgets.api import (PushButton, Menu, Action, Container, Dialog,
                               Label, Field, Notebook, DockItem, DockArea)

from ...utils.widgets.qt_tree_widget import QtTreeWidget
from ...utils.widgets.tree_nodes import TreeNode
from ...utils.widgets.qt_tree_menu import \
    (CopyAction, CutAction, PasteAction, NewAction, RenameAction, DeleteAction)
from ...tasks.api import (BaseTask, SimpleTask, ComplexTask)
from .tools_edition import (ToolsEditorDockItem, ToolsEditorDialog)


logger = logging.getLogger(__name__)


enamldef SaveAction(Action):
    """Action used to save task as a template.

    """
    #: Context holding the informations about on which task this action was
    #: invoked
    attr action_context

    #: Reference to the core plugin of the plugin.
    attr workspace

    text = 'Save template'

    triggered ::
        widget, node, obj, nid = action_context['data']
        core = workspace.workbench.get_plugin('enaml.workbench.core')
        ui = workspace.workbench.get_plugin('enaml.workbench.ui')
        cmd = 'ecpy.tasks.save'
        core.invoke_command(cmd,
                            dict(task=obj, mode='template', widget=ui.window)


def build_task(workbench):
    """Call the Command responsible for building a task.

    """
    core = workbench.get_plugin('enaml.workbench.core')
    ui = workbench.get_plugin('enaml.workbench.ui')
    return core.invoke_command('ecpy.task_manager.build_task',
                               {'parent_ui': ui.window})


enamldef SimpleMenu(Menu): menu:
    """Menu for tasks inheriting from SimpleTask (ie task with no children).

    """
    #: Context in which this menu was invoked.
    attr context

    #: Reference to the application workbench.
    attr workbench

    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add before'
        kwargs = {'workbench': workspace.workbench}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add after'
        kwargs = {'workbench': workspace.workbench}

    Action:
        separator = True

    CutAction:
        action_context << context
    CopyAction:
        action_context << context
    PasteAction:
        action_context << context

    Action:
        separator = True

    DeleteAction:
        action_context << context

    Action:
        separator = True

    RenameAction:
        action_context << context


enamldef ComplexMenu(Menu): menu:
    """Menu for tasks inheriting from ComplexTask (ie task with children).

    """
    #: Context in which this menu was invoked.
    attr context

    #: Reference to the active measure workspace.
    attr workspace

    NewAction:
        action_context << context
        factory = build_task
        kwargs = {'workbench': workspace.workbench}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add before'
        kwargs = {'workbench': workspace.workbench}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add after'
        kwargs = {'workbench': workspace.workbench}

    Action:
        separator = True

    SaveAction:
        action_context << context
        workbench = workspace.workbench

    Action:
        separator = True

    CutAction:
        action_context << context
    CopyAction:
        action_context << context
    PasteAction:
        action_context << context

    Action:
        separator = True

    DeleteAction:
        action_context << context

    Action:
        separator = True

    RenameAction:
        action_context << context


enamldef TaskTreeNode(TreeNode):
    """Common settings for tree nodes for tasks.

    """
    label = 'name'
    get_label => (obj):
        return obj.name + '(' + obj.task_id + ')'
    enter_rename => (obj):
        return obj.name


class _MeasEditionModel(Atom):
    """Model for the MeasureEditorView.

    This model ensures that only the editors fitting the currently selected
    task are displayed, that the selected editor get the selected task and that
    the editor preferences are applied to the tree.

    """
    #: Reference to the view this object control
    view = ForwardTyped(lambda: MeasEditionView)

    #: List of all editors which can be used given the selected_task
    valid_editors = List()

    #: Currently selected editor.
    selected_editor = Typed(BaseEditor)

    #: Should the tree be enabled given the currenlty selected editor.
    tree_enabled = Bool(True)

    #: Should the tree be visible given the currently selected editor.
    tree_visible = Bool(True)

    def clear_state(self, ):
        """ Destroy all previously used editors.

        """
        self.selected_editor = None
        self.valid_editors = []

    #--- Private API ----------------------------------------------------------

    def _post_setattr_selected_task(self, old, new):
        """Keep the list of valid editors up to date and update editor.

        """
        plugin = self.view.workspace.plugin
        editors = plugin.get_declarations('editors', plugin.editors)

        # Find all valid editors.
        valid_decls = {id: editor for id, editor in editors.iteritems()
                       if editor.is_meant_for(plugin.workbench, new_task)}
        valid_ids = set(valid_decls)

        # Get the current editor by id.
        current_editors = {editor.declaration.id: editor
                           for editor in self.valid_editors}:
        current_ids = set(current_editors)

        if valid_ids != current_ids:

            to_add = valid_ids - current_ids
            order = sorted(valid_decls.values(), attrgetter('rank', 'id'))

            valid_editors = []
            for decl in order:
                if decl.id in to_add:
                    try:
                        editor = decl.new(plugin.workbench)
                        valid_editors.append(editor)
                    except Exception:
                        logger.exception('Failed to create %s', decl.id)
                else:
                    valid_editors.append(current_editors[decl.id])

            self.valid_editors = valid_editors

        if not self.selected_editor:
            self.selected_editor = self.valid_editors[0]

        # Update selected editor with new selected task. If the editor changed
        # this is a no-op.
        self.selected_editor.selected_task = new_task

    def _post_setattr_selected_editor(self, old, new):
        """ Update infos for newly selected editor.

        """
        if old:
            old.unselected = True

        if new:
            # Update selected task.
            editor.selected_task = self.selected_task

            # Get tree preferences.
            self.tree_enabled = editor.tree_enabled
            self.tree_visible = editor.tree_visible

            editor.selected = True

enamldef MeasEditionView(Container): ed:
    """Main view for measurement edition.

    """
    #: Reference to the active workspace.
    attr workspace

    #: Reference to the measure being edited.
    attr measure
    measure ::
        _internal.clear_state()
        ed.selected_task = change['value'].root_task
        tree.root_node = change['value'].root_task
        tree.selection = change['value'].root_task
        editors.selected_tab = _internal.valid_editors[0].id

    #: Currently selected task.
    attr selected_task = measure.root_task

    #: Reference to the dock item this editor is embedded into.
    attr dock_item

    #: Controller responsible for the editors handling.
    attr _internal = _MeasEditionModel(workspace=workspace, view=self)

    constraints << [vbox(
                        hbox(lab, name, id_lab, id_val edition),
                        hbox(tree, editors)
                        ),
                    align('v_center', lab, name)]

    Label: lab:
        text = 'Name'

    Field: name:
        hug_width = 'ignore'
        text := measure.name

    Label: id_lab:
        text = 'Id'

    Field: id_val:
        text := measure.id

    PushButton: edition:
        text = 'Edit tools'
        tool_tip = ('Edit the pre-execution hooks, monitors, post-execution '
                    'hooks linked to the measure.')
        clicked ::
            name = dock_item.name + '_tools'
            if not any([item.name == name for item in dock_area.dock_items()]):
                # The editor does not exists so create it.
                ToolsEditorDockItem(dock_item.parent, name=name,
                                    measure=measure)

            # Now insert the item in a tab with the measure editor.
            dock_area.update_layout(InsertTab(item=name,
                                              target=dock_item.name))

    QtTreeWidget: tree:

        hug_height = 'ignore'
        root_node = measure.root_task
        selected >> selected_task
        visible << _internal.tree_visible
        enabled << _internal.tree_enabled

        TaskTreeNode:
            node_for = [ComplexTask]
            children_member = 'children'
            children_changed = 'children_changed'
            add = [BaseTask]
            move = [BaseTask]
            insert_child => (obj, index, child):
                obj.add_child_task(index, child)
            delete_child => (obj, index):
                obj.remove_child_task(index)
            move_child => (obj, old, new):
                obj.move_child_task(old, new)
            ComplexMenu:
                workspace = ed.workspace

        TaskTreeNode:
            node_for = [SimpleTask]
            SimpleMenu:
                workspace = ed.workspace

    Notebook: editors:
        # Update the selected editor when the user click a tab or when the
        # previously selected editor is removed.
        tabs_closable = False
        hug_width = 'ignore'
        selected_tab ::
            ed = self.find(selected_tab)
            if ed != editors:
                _internal.selected_editor = ed
        Include:
            objects << _internal.valid_editors


enamldef MeasureEditorDockItem(DockItem): main:
    """ DockItem used for editing a measure, main component of the workspace
    content.

    """
    #: Reference to the workspace.
    alias workspace : editor.workspace

    #: Reference to the edited measure.
    alias measure : editor.measure

    closed ::
        workspace.plugin.edited_measures.remove(measure)

    stretch = 10

    Container:
        constraints = [vbox(editor,
                            hbox(new, save, load, spacer, enqueue_button))]

        MeasEditionView: editor:
            dock_item = main

        PushButton: new:
            text = 'New'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked :: workspace.new_measure(dock_item=main)

        PushButton: save:
            text = 'Save'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                workspace.save_measure(measure, mode='file')

        PushButton: load:
            text = 'Load'
            hug_width  = 'strong'
            hug_height = 'strong'
            Menu:
                Action:
                    text = 'Load measure'
                    triggered ::
                        workspace.load_measure(mode='file', dock_item=main)
                Action:
                    text = 'Load template'
                    enabled = False
                    tool_tip = fill(cleandoc('''Load a template task as a
                                    measure using the default parameters
                                    concerning the  tools.'''), 50)
                    triggered ::
                        workspace.load_measure(mode='template', dock_item=main)

        PushButton: enqueue_button:
            text = 'Enqueue'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked::
                workspace.enqueue_measure(measure)


enamldef MeasureEditorDialog(Dialog): main:
    """ Dialog allowing to re-edit a measure once it is in the queue.

    """
    #: Reference to the active workspace.
    alias workspace : ed.workspace

    #: Reference to the edited measure.
    attr measure : ed.measure

    title = 'Edit measure {}'.format(measure.name)

    closed::
        if 'build_deps' in measure.store:
            del measure.store['build_deps']
        if 'runtime_deps' in measure.store:
            del measure.store['runtime_deps']

    Container:
        constraints = [vbox(area, hbox(spacer, check, save))]

        DockArea:
            style = 'metro'
            DockItem: item:

                name = 'measure'
                closable = False

                MeasEditionView: ed:
                    dock_item = item

        # TODO implement (should re-use at best the work did in enqueue)
        PushButton: save:
            text = 'Run checks'
            enabled = False
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                workspace.save_measure(measure, mode='file')

        PushButton: save:
            text = 'Save'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                workspace.save_measure(measure, mode='file')
