# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Dependencies plugin manifest.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command

PLUGIN_ID = 'ecpy.app.dependencies'


# =============================================================================
# --- Factories ---------------------------------------------------------------
# =============================================================================

def dependencies_plugin_factory():
    """Factory function for the DependenciesManagerPlugin.

    """
    from .plugin import DependenciesPlugin
    return DependenciesPlugin()


# =============================================================================
# --- Command handlers --------------------------------------------------------
# =============================================================================

def collect_dependencies(event):
    """Handler for the 'ecpy.app.dependencies.collect' command.

    """
    manager = event.workbench.get_plugin(PLUGIN_ID)
    if event.trigger:
        event.parameters['owner'] = event.trigger.manifest.id
    return manager.collect_dependencies(**event.parameters)

# =============================================================================
# --- Descriptions ------------------------------------------------------------
# =============================================================================

BUILD_DEPENDENCIES_PLUGINS_DESCRIPTION = \
"""Plugins which expose objects suceptibles to be necessary to rebuild part
of the application should declare a BuildDependency to this point."""


RUNTIME_DEPENDENCIES_PLUGINS_DESCRIPTION = \
"""Plugins which expose objects suceptibles to be necessary to run part
of the application should declare a RuntimeDependency to this point."""


COLLECT_DEPENDENCIES_DESCRIPTION=\
"""Build a dict of dependencies for a given obj.

NB : This assumes the obj has a traverse allowing to parcour all the component
or is an instance of configobj.Section

Parameters
----------
obj : Section, or traversable object.
    Obj for which dependencies should be computed.

dependencies : {['build'], ['runtime'], ['build', 'runtime']}
    Kind of dependencies which should be gathered.

owner : unicode, optional
    Calling plugin id. Used for some runtime dependencies needing to know
    the ressource owner.

Returns
-------
result : bool
    Flag indicating the success of the operation.

dependencies : dict
    In case of success:
    - Dicts holding all the classes or other dependencies to build, run
      or build and run a task without any access to the workbench.
      If a single kind of dependencies is requested a single dict is
      returned otherwise two are returned one for the build ones and
      one for the runtime ones

    Otherwise:
    - dict holding the id of the dependency and the asssociated
      error message.

"""


# =============================================================================
# --- Manifest ----------------------------------------------------------------
# =============================================================================

enamldef DependenciesManifest(PluginManifest):
    """ Manifest for the plugin handling object dependencies.

    """
    id = 'ecpy.app.dependencies'
    factory = dependencies_plugin_factory

    # =========================================================================
    # --- Extension points ----------------------------------------------------
    # =========================================================================

    ExtensionPoint:
        id = 'build'
        description = BUILD_DEPENDENCIES_PLUGINS_DESCRIPTION

    ExtensionPoint:
        id = 'runtime'
        description = RUNTIME_DEPENDENCIES_PLUGINS_DESCRIPTION


    # =========================================================================
    # --- Extensions ----------------------------------------------------------
    # =========================================================================

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'ecpy.app.dependencies.collect'
            description = COLLECT_DEPENDENCIES_DESCRIPTION
            handler = collect_dependencies
