# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Tools to edit and create entries with a custom formatting.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from collections import Counter

from atom.api import (Atom, Unicode, List, Dict, Instance)
from enaml.widgets.api import (ObjectCombo, Dialog, Container, Field, Label,
                               PushButton)
from enaml.layout.api import hbox, vbox, spacer

from ....utils.widgets.qt_line_completer import QtLineCompleter
from ....utils.widgets.list_editor import ListEditor


class _Entry(Atom):
    """Simple place-holder class.

    """
    #: Selected database entry.
    entry = Unicode()

    #: All database entries that can be used.
    entries = List()


enamldef _EntrySelection(ObjectCombo):
    """Custom ObjectCombo used to select an entry.

    """
    #: Reference to the _Entry driving the widget.
    attr model

    items = model.entries
    selected := model.entry


class _EntryBuilder(Atom):
    """Model for entry edition dialog

    Get all database entries from monitor, and build the easiest to read
    possible list of entries mapping them to full database paths.

    Parameters
    ----------
    monitor : TextMonitor
        Instance of the monitor for which a new custom entry is created or an
        existing one is edited.

    entry : MonitoredEntry, optional
        Custom entry being edited.

    """
    #: Mapping between user readable names and full names of database entries.
    map_entries = Dict()

    #: List of used database entries.
    #: This is necessary to build the new entry value.
    used_entries = List()

    def __init__(self, monitor, new_entry=None):

        # Build easy to understand entries names from the full paths of the
        # database.
        entries = monitor.all_database_entries
        short_entries = [entry.rsplit('/', 1)[1] for entry in entries]
        depth = 2

        while self._remove_duplicates(entries, short_entries, depth):
            depth += 1

        self.map_entries = {short_entries[i]: entries[i]
                            for i in xrange(len(entries))}

        # If we are editing an already existing entry get additional infos from
        # it.
        if new_entry:
            aux = self.map_entries.iteritems()
            entries = self.map_entries.keys()
            self.used_entries = [_Entry(entry=key, entries=entries)
                                 for key, val in aux
                                 if val in new_entry.depend_on]

    def format_(self, format_str):
        """ Replaced simplified names in a string by full path.

        Only the names inside {} are replaced and the {} are conserved so that
        further formatting can be performed directly.

        Parameters
        ----------
        format_str : str
            String in which the replacement fields using simple names should be
            replaced by fields using the full path.

        Returns
        -------
        formatted : str
            String in which the replacement fields using simple names has been
            replaced by fields using the full path.

        """
        mapping = self.map_entries
        repl = {name: '{'+mapping[name]+'}'
                for name in self.get_used_names()}
        return format_str.format(**repl)

    def add_entry(self, index, pos):
        """Add a database entry to the list of used entries.

        """
        new = self.used_entries[:]
        index = index + 1 if pos == 'after' else index
        new.insert(insert, _Entry(entries=list(self.map_entries.keys())))
        self.used_entries = new

    def remove_entry(self, index):
        """Remove a database from the list of used entries.

        """
        new = self.used_entries[:]
        del new[index]
        self.used_entries = new

    def get_used_paths(self):
        """ List the full path of the used database entries.

        """
        mapping = self.map_entries
        used = used_entries
        return [mapping[e.entry] for e in used if e.entry in mapping]

    @staticmethod
    def _remove_duplicates(entries, short_entries, depth):
        """Create the easiest to read database entries names with no doublons.

        """
        duplicate = [e for e, count in Counter(short_entries).items()
                     if count > 1]
        if not duplicate:
            return False

        for entry in duplicate:
            indexes = [i for i, x in enumerate(short_entries) if x == entry]
            for i in indexes:
                short_entries[i] = '/'.join(entries[i].split('/')[-depth:-1])

        return True


enamldef EntryDialog(Dialog): dial:
    """ Dialog used to build a custom user entry for a TextMonitor.

    """
    #: Reference to the monitor whose entry is edited.
    attr monitor

    #: Reference to the entry being edited.
    attr entry

    #: Model class doing the database path manipulations.
    attr builder = _EntryBuilder(monitor, new_entry)

    title = 'Edit entry' if entry else 'Create entry'

    Container:
        constraints << [vbox(hbox(name_lab, name), entries, list,
                             hbox(for_lab, formating),
                             hbox(spacer, cancel, ok))]
        Label: name_lab:
            text = 'Name'
        Field: name:
            hug_width = 'medium'

        Label: entries:
            text = 'Entries'

        ListEditor(_EntrySelection): l_editor:
            l_editor.model << builder
            l_editor.iterable_name = 'used_entries'
            l_editor.operations = {'add': }

        Label:for_lab:
            text = 'Formatting'
        QtLineCompleter: formating:
            entries_updater = builder.get_used_names

        PushButton: ok:
            text = 'Ok'
            clicked::
                # If we are not editing an existing MonitoredEntry creates one.
                if not dial.entry:
                    formatting = builder.format_(formating.text)
                    dependences = builder.get_used_paths()
                    entry = MonitoredEntry(name=name.text,
                                           path=name.text,
                                           formatting=formatting,
                                           depend_on=dependences
                                           )
                    dial.entry = entry

                dial.accept()

        PushButton: cancel:
                text = 'Cancel'
                clicked::
                    dial.reject()
