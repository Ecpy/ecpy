# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Editors for task execution settings.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.widgets.api import (Container, GroupBox, CheckBox, ScrollArea,
                               PopupView, Field, RadioButton,
                               ObjectCombo, PushButton)
from enaml.core.api import Looper, Conditional
from enaml.layout.api import vbox, hbox

from ....tasks.api import ComplexTask, SimpleTask
from ....tasks.tools.task_editor import FoldableTaskEditor
from ..base_editor import BaseEditor
from .editor_model import ExecutionEditorModel

enamldef _PopupField(PopupView): popup:
    """Popup containing a field for the user to enter the name of a new
    execution pool.

    """
    Container:
        constraints = [vbox(field, hbox(ok, cancel))]

        Field: field:
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        PushButton: ok:
            enabled << bool(field.text)
            text = 'Ok'
            clicked ::
                popup.close()
                #: Use event on parent as popup are non-blocking
                popup.parent.answer = field.text
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                popup.close()

enamldef _PopupList(PopupView): popup:
    """Popup displaying a list of pools allowing the user to choose upon which
    ones to wait or not.

    """
    #: List of existing pools.
    attr pools

    #: Pools selected by the user.
    attr selected : set

    Container:
        constraints = [vbox(area, hbox(ok, cancel))]

        ScrollArea: area:
            Container:
                padding = 0
                Looper:
                    iterable = pools
                    CheckBox:
                        text = loop_item
                        checked << loop_item in selected
                        checked::
                            if change['value']:
                                selected.add(loop_item)
                            else:
                                selected.remove(loop_item)
        PushButton: ok:
            text = 'Ok'
            clicked ::
                popup.close()
                #: Use event on parent as popup are non-blocking
                popup.parent.answer = selected

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                popup.close()


def _set_parallel(task, key, value):
    """Convenience function setting a value in parallel.

    We copy the dict so that the assignment fire a notification.

    """
    parallel = task.parallel.copy()
    parallel[key] = value
    task.parallel = parallel


def _set_wait(task, key, value):
    """Convenience function setting a value in wait.

    We copy the dict so that the assignment fire a notification.

    """
    wait = task.wait.copy()
    wait[key] = new
    task.wait = aux


# A task can be both parallel and wait in such a case the wait occurs in a
# blocking fashion before starting the new thread.

enamldef _BaseExecutionEditor(Container):
    """Base editor for execution settings.

    """
    #: Reference to the task this editor is linked to.
    attr task

    #: Reference to the model keeping track of the pools currently used.
    attr _model

    padding = 0
    constraints << [hbox(stop, parallel, wait,
                         *tuple(par_cond.items + wai_cond.items))]

    CheckBox: stop:
        text = 'Stoppable'
        checked := task.stoppable
        tool_tip = ('Can the program be stopped or paused at this\n'
                    'task. Disabling allow to skip some check and might\n'
                    'be beneficial in very tight loops.')
        hug_width = 'strong'

    CheckBox: parallel:
        # Workaround the fact that otherwise when the checkbox is unchecked
        # the declaration for the ObjectCombo in par_cond is destroyed but the
        # qt object try to refresh its items given the async nature of enaml.
        attr active : bool = checked

        text = 'Parallel'
        tool_tip = 'Should this task perform its job in parallel (new thread).'
        hug_width = 'strong'
        checked << bool(task.parallel.get('activated'))
        checked ::
            _set_parallel(task, 'activated', change['value'])

            active = change['value']

    CheckBox: wait:
        text = 'Wait'
        tool_tip = ('Should this task wait for any other task currently\n'
                    'working in parallel.')
        hug_width = 'strong'
        checked << bool(task.wait.get('activated'))
        checked ::
            _set_wait(task, 'activated', change['value'])

    # Select parallel pool of execution.
    Conditional: par_cond:
        condition << parallel.active

        ObjectCombo:
            items << _model.pools
            selected << task.parallel.get('pool')
            selected ::
                _set_parallel(task, 'pool', change['value'])

        PushButton:
            #: Way for the popup to send its answer (popup is non-blocking)
            attr answer

            text = 'New'
            hug_width = 'strong'

            initialized::
                # Need to init the value so that the popup answer is signaled.
                self.answer = '__gg__'
            clicked ::
                popup = _PopupField(self)
                popup.show()
            answer ::
                _set_parallel(task, 'pool', change['value'])

    Conditional: wai_cond:
        condition << wait.checked

        #: Currently selected pool to wait on.
        attr selected = set(task.wait.get('wait', []) +
                                task.wait.get('no_wait', []))

        RadioButton: r_wait:
            text = 'Wait on'
            tool_tip = ("Wait on the list of selected pools or all if no\n"
                        "pool is selected")
            checked << 'no_wait' not in task.wait
            checked ::
                task.wait = dict(activated=True,
                                 wait=list(wai_cond.selected))

        RadioButton:
            text = 'No wait on'
            tool_tip = ("Don't wait on the selected pools or wait on all if\n"
                        "no pool is selected")
            checked << 'no_wait' in task.wait
            checked ::
                task.wait = dict(activated=True,
                                 no_wait=list(wai_cond.selected))

        Field:
            read_only = True
            placeholder << 'All' if r_wait.checked else 'None'
            text << ', '.join(wai_cond.selected)
            hug_width = 'ignore'

        PushButton:

            #: Way for the popup to send its answer (popup is non-blocking)
            attr answer

            text = 'Edit'
            hug_width = 'strong'

            initialized ::
                # Need to init the value so that the popup answer is signaled.
                self.answer = ['']
            clicked ::
                sel = wai_cond.selected.copy()
                popup = _PopupList(self, selected=sel, pools=_model.pools)
                popup.show()
            answer ::
                new_sel = change['value']
                wai_cond.selected = new_sel
                if 'no_wait' in task.wait:
                    task.wait = dict(activated=True, no_wait=list(new_sel))
                else:
                    task.wait = dict(activated=True, wait=list(new_sel))

enamldef SimpleTaskExecutionEditor(GroupBox):
    """Editor specialized in handling SimpleTask subclasses.

    """
    #: Reference to the task this editor is linked to.
    alias task : ed.task

    #: Reference to the root editor managing the cache.
    attr root

    #: Reference to the model driving the whole execution property edition.
    alias _model : ed._model

    func refresh():
        """Function making sure that the editor is displayed correctly.

        """
        self.show()

    title = task.name

    padding = 0

    _BaseExecutionEditor: ed:
        pass


enamldef ComplexTaskExecutionEditor(GroupBox): main:
    """Editor specialized in handling ComplexTask subclasses.

    """

    #: Reference to the task this editor is linked to.
    attr task

    #: Reference to the root editor managing the cache.
    alias root : ed.root

    #: Reference to the model driving the whole execution property edition.
    attr _model

    func refresh():
        """Function making sure that the editor is displayed correctly.

        """
        self.show()
        ed.refresh()

    title = task.name if task else ''

    layout_constraints => ():
        """Setup the constraints for the children.

        """
        children = self.widgets()
        constraints = [vbox(*children)]
        for child in children:
            constraints.append(child.left == contents_left)
        return constraints

    # The root task does not have that kind of settings
    Conditional:
        condition << task.depth != 0
        _BaseExecutionEditor:
            task = main.task
            _model = main._model

    FoldableTaskEditor: ed:
        task = main.task
        operations = {}


enamldef ExecutionEditor(BaseEditor): editor:
    """Editor allowing to customize the execution parameters of a task.

    For each task one can decide whether to make the measure stoppable at that
    task level, to run it in parallel and/or make it wait on other task running
    in parallel before running.

    """
    # Note for the time being all observers are always connected. If this end
    # up being a performances issue we will change the behavior then.

    #: Model keeping track of the declared execution pools.
    attr pool_model

    title = 'Execution editor'

    func view_for(task):
        """Create a widget for the specified task.

        The view is initialized but given no parent.

        """
        if task not in _cache:
            if isinstance(task, ComplexTask):
                view_cls = ComplexTaskExecutionEditor
            else:
                view_cls = SimpleTaskExecutionEditor
            _cache[task] = view_cls(task=task, root=self, _model=pool_model)

        return _cache[task]


    func discard_view(task):
        """Take care of destroying the view associated with a given task.

        """
        try:
            view = _cache.pop(task)
            view.destroy()
        except KeyError:
            pass

    func set_view_for(task):
        """Set the currently displayed widget to match the selected view.

        """
        if not pool_model:
            editor.pool_model = ExecutionEditorModel(root=task.root)

        if task:
            view = view_for(task)
            view.set_parent(scroll)
            view.refresh()

    selected_task ::
        set_view_for(change['value'])

    initialized ::
        if selected_task:
            set_view_for(selected_task)

    ended ::
        # When this view is destroyed it must destroy all the view in the cache
        # Do it by depth order to always destroy the parent first, should allow
        # to speed up a bit the process.
        tasks = sorted(_cache, attrgetter('depth'))
        for t in tasks:
            view = _cache[task]
            if not view.is_destroyed:
                view.destroy()

    Container:
        ScrollArea: scroll:
            pass

    # =========================================================================
    # --- Private API ---------------------------------------------------------
    # =========================================================================

    #: Dictionary used to store the view associated with each task.
    attr _cache : dict = {}
