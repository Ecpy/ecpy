# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets used to edit an instrument profile.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from configobj import ConfigObj
from atom.api import Coerced
from enaml.validator import Validator
from enaml.layout.api import hbox, vbox, spacer
from enaml.widgets.api import (Notebook, Page, Label, Field, PushButton,
                               Dialog, MultilineField, ObjectCombo)

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names
from .instrument_selection import ModelSelectionDialog


class SetValidator(Validator):
    """Validator allowing names which does not yet exist.

    """
    #: Already existing names which are then not allowed.
    existing = Coerced(set)

    def validate(self, text):
        """Check that the name does yet exist.

        """
        return text not in self.existing


enamldef ConnectionCreationDialog(Dialog): dial:
    """Dialog allowing the user to select the connection to add to the profile.

    """
    #: Reference to the instrument plugin
    attr plugin

    #: Instrument model infos for which to create the connection
    attr model_infos

    #: Currently selected connection declaration.
    attr connection

    Container:

        constraints = [vbox(hbox(conns, vbox(lab, desc, spacer)),
                            hbox(spacer, can, ok))]

        QtListStrWidget: conns:
            items = ids_to_unique_names(model_infos.connections)
            selected_item ::
                c_id = items[selected_item]
                infos = model_infos.connections[selected_item]
                dial.c_decl = plugin.create_connection(c_id, infos)

        Label: lab:
            text << connection.declaration.id if connection else ''

        MultilineField: desc:
            text << connection.declaration.description if connection  else ''

        PushButton: can:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()


# XXXX to complete
enamldef ConnectionValidationDialog(Dialog):
    """Dialog allowing the user to test that the provided information allow to
    open the connection.

    """
    #: Reference to the ProfileEditionWidget which opened this dialog.
    attr editor

    Container:

        constraints = [vbox(hbox(vbox(conn, sett), test), infos)]

        ObjectCombo: conn:
            items = []
            tool_tip = ''

        ObjectCombo: sett:
            items = []
            selected_item = None
            tool_tip = ''

        ObjectCombo: driver_impl:
            items = []
            tool_tip = ''

        PushButton: test:
            text = 'Test connection'
            clicked ::
                pass

        MultilineField: infos:
            pass


enamldef SettingsCreationDialog(Dialog):
    """Dialog allowing the user to select the settings to add to the profile.

    """
    #: Reference to the instrument plugin
    attr plugin

    #: Instrument model infos for which to create the settings
    attr model_infos

    #: Settings instance to insert.
    attr settings

    Container:

        constraints = [vbox(hbox(conns, vbox(lab, desc, spacer)),
                            hbox(spacer, can, ok))]

        QtListStrWidget: conns:
            items = ids_to_unique_names(model_infos.settings)
            selected_item ::
                s_id = items[selected_item]
                infos = model_infos.settings[selected_item]
                dial.c_decl = plugin.create_settings(s_id, infos)

        Label: lab:
            text << settings.declaration.id if settings else ''

        MultilineField: desc:
            text << settings.declaration.description if settings  else ''

        PushButton: can:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()


enamldef ProfileEditionWidget(Container): main:
    """Widget dedicated to editing a profile.

    """
    #: Reference to the instrument plugin.
    attr plugin

    #: ProfileInfos driving this widget. Not that the infos are not kept in
    #: sync at all time and one should call sync before inspecting the content
    #: of the member.
    attr profile_infos

    #: Connections editors opened.
    alias connections : cons.items

    #: Settings editors opened.
    alias settings : setts.items

    #: Prevent edition while allowing to navigate the notebooks.
    attr read_only : bool = False

    func sync():
        """Synchronize the UI with the underlying model.

        This is needed to update the connections and settings.

        """
        cs = profile_infos._config['connections']
        cs.clear()
        for c in connections:
            cs[c.declaration.id] = c.gather_infos()

        sts = profile_infos._config['settings']
        sts.clear()
        for s in settings:
            cs[s.name] = s.gather_infos()

    initialized ::
        profile = profile._config
        id_val.text = profile['id']
        main.model_info = plugin.get_model_info(profile['model_id'])
        for k, v in profile.get('connections', {}).items():
            plugin.create_connection(k, v)

        for k, v in profile.get('settings', {}).items():
            plugin.create_settings(k, v)

    constraints = [vbox(hbox(id_lab, id_val),
                        hbox(model_lab, model, m_choose),
                        *nb.items]

    Label: id_lab:
        text = 'Id'
    Field: id_val:
        text := profile_infos.id
        validator << SetValidator(existing=plugin.profiles)
        enabled = not read_only

    Label: model_lab:
        text = 'Instrument'
    Field: model:
        text << profile_infos.model.id if profile_infos.model else ''
        read_only = True
    PushButton: m_choose:
        text = 'Choose'
        visible = not read_only
        clicked ::
            dial = ModelSelectionDialog(parent=self, plugin=plugin,
                                        model=profile_infos.model)
            if dial.exec_():
                new = dial.model
                main.connections = [c for c in main.connections
                                    if c.declaration.id in new.connections]
                main.settings = [s for s in main.settings
                                 if s in s.declaration.id in new.settings]
                main.profile_infos.model = new

    Conditional: nb:
        condition << bool(profile_infos.model)

        Notebook:
            tabs_closable = False
            tabs_movable = False
            Page:
                title = 'Connections'
                Container:

                    constraints = ([hbox(conns, *(tuple(s_conn.objects) +
                                                  (vbox(add_c, del_c, val_c,
                                                        spacer))))]
                                   if not read_only else
                                   [hbox(conns, *(tuple(s_conn.objects) +
                                                  (vbox(val_c, spacer))))])

                    QtListStrEditor: conns:
                        sort = False
                        to_string = lambda c: c.title
                    Include: s_conn:
                        destroy_old = False
                        objects << (conns.selected_item if conns.selected_item
                                    else [Container()])
                    PushButton: add_c:
                        text = 'Add'
                        enabled << (set(connections) !=
                                    set(profile_infos.model.connections))
                        visible = not read_only
                        clicked ::
                            kw = {'plugin': plugin,
                                  'model_info': profile_infos.model}
                            dial = ConnectionCreationDialog(**kw)
                            dial.exec_()
                            if dial.connection:
                                dial.connection.read_only = read_only
                                main.connections = (main.connections[:] +
                                                    [dial.connection])
                                conns.selected_item = dial.connection
                    PushButton: del_c:
                        text = 'Delete'
                        enabled << bool(connections)
                        visible = not read_only
                        clicked ::
                            s = main.connections[:]
                            del s[self.selected_index]
                            main.connections = s
                    PushButton: val_c:
                        text = 'Validate'
                        clicked ::
                            selected = conns.selected_item
                            d = ConnectionValidationDialog(editor=main,
                                                           connection=selected)
                            d.exec_()

            Page:
                title = 'Settings'
                Container:

                    constraints = ([hbox(setts, *(tuple(s_sett.objects) +
                                                  (vbox(add_s, del_s))))]
                                   if not read_only else
                                   [hbox(setts, *s_sett.objects)])

                    QtListStrEditor: setts:
                        sort = False
                        to_string = lambda s: s.name
                    Include: s_sett:
                        destroy_old = False
                        objects << (setts.selected_item if setts.selected_item
                                    else [Container()])
                    PushButton: add_s:
                        text = 'Add'
                        visible = not read_only
                        clicked ::
                            kw = {'plugin': plugin,
                                  'model_info': profile_infos.model}
                            dial = SettingsCreationDialog(**kw)
                            dial.exec_()
                            if dial.settings:
                                dial.settings.read_only = read_only
                                main.settings = (main.settings[:] +
                                                 [dial.settings])
                                conns.selected_item = dial.settings
                    PushButton: del_s:
                        text = 'Delete'
                        visible = not read_only
                        clicked ::
                            s = main.settings[:]
                            del s[self.selected_index]
                            main.settings = s


enamldef ProfileEditionDialog(Dialog): dial:
    """Dialog allowing to edit a profile infos.

    """
    #: Reference to the instrument plugin.
    alias plugin : ed.plugin

    #: ProfileInfos to edit.
    alias profile_infos : ed.profile_infos

    Container:

        constraints = [vbox(ed, hbox(spacer, can, ok))]

        ProfileEditionWidget: ed:
            pass

        PushButton: can:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            text = 'Ok'
            clicked ::
                ed.sync()
                dial.accept()
