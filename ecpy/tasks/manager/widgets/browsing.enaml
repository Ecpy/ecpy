# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widget allowing to browse the different tasks known to the manager.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from atom.api import Atom, ForwardTyped, List, Unicode
from enaml.layout.api import hbox, spacer
from enaml.core.api import Conditional, Include
from enaml.widgets.api import (PushButton, ObjectCombo, Action, Container,
                               Dialog)

from ....utils.widgets.qt_list_str_widget import QtListStrWidget

# Circular import protection
def task_manager():
    from .plugin import TaskManagerPlugin
    return TaskManagerPlugin

# XXXX would be nicer with regex but I never managed to get the regex right.
def normalize_name(name):
    """Normalize names by replacing '_' by spaces, removing the extension,
    and adding spaces between 'aA' sequences.

    """
    if name.endswith('.ini') or name.endswith('Task'):
        name = name[:-4] + '\0'
    aux = ''
    for i, char in enumerate(name):
        if char == '_':
            aux += ' '
            continue

        if char != '\0':
            if char.isupper() and i != 0:
                if name[i-1].islower():
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += ' ' + char
                else:
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += char
            else:
                if i == 0:
                    aux += char.upper()
                else:
                    aux += char
    return aux


enamldef TaskSelector(Container):
    """Basic widget displaying a list of tasks acording to the selected filter.

    """
    #: Reference to the tasks manager.
    attr manager

    #: Flag indicating whether or not to display the filter selection dialog.
    attr display_filters : bool = True

    #:
    attr selected_filter = 'All'
    selected_filter ::
        if selected_filter:
            tasks = manager.list_tasks(selected_filter)
            if tasks:
                self.tasks = tasks
            else:
                self.tasks = ['']
        else:
            self.tasks = manager.list_tasks()

    alias tasks : t_select.items
    tasks = manager.list_tasks(selected_filter)

    alias selected_task : t_select.selected_item

    Conditional:
        condition << display_filters
        ObjectCombo:
            items << sorted(manager.filters)
            selected << selected_filter

    QtListStrWidget: t_select:
        to_string = normalize_name
