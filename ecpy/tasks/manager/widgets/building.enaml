# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets dedicated to the construction of new tasks.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from atom.api import (Atom, Typed, Unicode, ForwardTyped, Bool, observe)
from enaml.core.api import Include
from enaml.widgets.widget import Widget
from enaml.layout.api import hbox, spacer, vbox
from enaml.widgets.api import (PushButton, Menu, Action, Container, Dialog,
                               Label, MultilineField)

from .browsing import TaskSelector


# Circular import protection
def task_manager():
    from .plugin import TaskManagerPlugin
    return TaskManagerPlugin


def abstract_config_task():
    from .config.base_task_config import AbstractConfigTask
    return AbstractConfigTask


enamldef BuilderView(Dialog): dial:
    """Dialog to select a task and get the associate config.

    """
    #: Reference to the task manager.
    alias manager : selector.manager

    #: Config object corresponding to the currently selected task.
    attr config

    title = 'Select the task you want to add'

    Container:
        constraints << [hbox(selector,
                             *tuple(list(conf.objects) + [vbox(ok,
                                                            cancel,
                                                            spacer)]))]
        TaskSelector: selector:
            hug_width = 'strong'
            selected_task ::
                if selected_task:
                    conf, view = manager.get_config(selected_task)
                    dial.config = conf
                    conf.objects = [view]
                else:
                    dial.config = None
                    conf.objects = []

        Include: conf:
            pass

        PushButton: ok:
            text = 'Ok'
            enabled << config.ready if config else False
            clicked ::
                dial.accept()

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()


# XXXX Re-enable templates later.
#enamldef TemplateSelectorView(Dialog): dial:
#    """ Simple dialog to select a template to build.
#
#    """
#    attr manager
#    attr path
#    Container:
#        constraints = [hbox(selector,
#                            vbox(name, doc),
#                            vbox(ok, cancel, spacer))]
#        TaskSelector: selector:
#            display_filters = False
#            selected_filter = 'Template'
#            hug_width = 'strong'
#            hug_height = 'ignore'
#            manager << dial.manager
#        Label: name:
#            text << manager.selected_task
#            text ::
#                tasks, _ = self.manager.tasks_request([text])
#                new_path, _, new_doc = tasks[text]
#                path = new_path
#                doc.text = new_doc
#        MultilineField: doc:
#            read_only = True
#        PushButton: ok:
#            text = 'Ok'
#            enabled << bool(name.text)
#            clicked ::
#                dial.accept()
#        PushButton: cancel:
#            text = 'Cancel'
#            clicked ::
#                dial.reject()
